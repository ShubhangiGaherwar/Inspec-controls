name : Trial action
on: push
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Printing
        run: |
          echo "Hello World!!"

          # control_dirs= ls | grep coupa
          # echo $control_dirs
          #
          # for each_dir in $(ls | grep coupa)
          # do
          #   zip_file_name="${each_dir}_release.zip"
          #   zip -r $zip_file_name $each_dir
          #   echo $zip_file_name
          # done
          # echo "done"
          #
          # ls
          # echo "grepped zip files are :"
          # for each_zip_dir in $(ls | grep .zip)
          # do
          #   echo $each_zip_dir
          # done

          curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec
          export CHEF_LICENSE="accept"
          inspec -v
          for each_role_dir in $(ls | grep coupa)
          do
             echo "${each_role_dir}"
             inspec archive ./$each_role_dir  --zip --output=./"${each_role_dir}"_release.zip
          done
 release_test:
   runs-on: ubuntu-latest
   steps:
     - name: printing..
       run: echo "Hi"
     # - name: "Automated Version Bump"
     #    id: version-bump
     #    uses: "phips28/gh-action-bump-version@master"
     #    with:
     #      tag-prefix: ''
     #    env:
     #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     #  # - name: "cat package.json"
     #  #   run: cat ./package.json
     #  - name:  'Output Step'
     #    env:
     #      NEW_TAG: ${{ steps.version-bump.outputs.newTag }}
     #    run: echo "new tag $NEW_TAG"
     #
     #  - name: Create Release
     #    id: create_release
     #    uses: actions/create-release@v1
     #    env:
     #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
     #    with:
     #      tag_name: ${{ steps.version-bump.outputs.newTag }}
     #      release_name: Release ${{ steps.version-bump.outputs.newTag }}
     #      body: |
     #        Changes in this Release
     #        - First Change
     #        - Second Change
     #      draft: false
     #      prerelease: false
     #  - name : Printing create release output
     #    run:
     #         echo " Create release outputs = ${{steps.create_release.outputs.upload_url}}"
     #         echo "${{steps.create_release.outputs.html_url}}"
     #  - name: Upload Release Assets
     #    id: upload-release-assets
     #    uses: dwenegar/upload-release-assets@v1
     #    env:
     #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     #    with:
     #      release_id: ${{ steps.create_release.outputs.id }}
     #      assets_path:  ./*.zip
  # inspec_check:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     # - name: Run Inspec
  #     #   run: inspec archive ./coupa-utl
  #     # - name: Inspec Tools Action
  #     #   uses: mitre/inspec_tools_action@v1.0
  #     #   with:
  #     #     command: inspec archive ./coupa-utl
  #     - name: Insatalling inspec and Printing result of inspec Archive
  #       run: |
  #          curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec
  #          export CHEF_LICENSE="accept"
  #          inspec -v
  #
  #          # inspec archive ./coupa-utl
  #          # inspec archive ./coupa-app
  #
  #          for each_role_dir in $(ls | grep coupa)
  #          do
  #             echo "${each_role_dir}"
  #             inspec archive ./$each_role_dir  --zip --output=./"${each_role_dir}"_release.zip
  #          done
  #          pwd
  #          ls -alh
      #inspec archive ./coupa-utl --chef-license accept-silent
      # - name: Inspec Tools Action
      #   uses: mitre/inspec_tools_action@v1.0


      # zip -r $zip_file_name $each_dir
      ## zip -r coupa_app_release.zip coupa-app
      # zip -r coupa_db_release.zip coupa-db
      # echo "Coupa-app and db dir zipped"
      #




      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body: |
      #       Changes in this Release
      #       - First Change
      #       - Second Change
      #     draft: false
      #     prerelease: false
      # - name : Printing create release output
      #   run:
      #        echo " Create release outputs = ${{steps.create_release.outputs.upload_url}}"
      #        echo "${{steps.create_release.outputs.html_url}}"
      # - name: Upload Release Assets
      #   id: upload-release-assets
      #   uses: dwenegar/upload-release-assets@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     release_id: ${{ steps.create_release.outputs.id }}
      #     assets_path:  coupa_app_release.zip
      #
      # - uses: dwenegar/upload-release-assets@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     release_id: ${{ steps.create_release.outputs.id }}
      #     assets_path:  coupa_db_release.zip
      #
      #
      #
      #
      #






      # - name: Upload to release
      #   uses: JasonEtco/upload-to-release@master
      #   with:
      #     args: coupa_app_release.zip
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}








      # - name: Archive Release
      #   uses: thedoctor0/zip-release@master
      #   with:
      #     directory: './coupa-app'
      #     filename: 'coupa_app_release.zip'
      # - name: Archive Release
      #   uses: thedoctor0/zip-release@master
      #   with:
      #     directory: './coupa-db'
      #     filename: 'coupa_db_release.zip'
      # - name : Printing
      #   run:
      #      ls -alh
#
#
#
#
#
#       name: Java CI
# on:
#   push:
#   release:
#     types: [published]
#
# jobs:
#   build:
#     runs-on: self-hosted
#     steps:
#     - uses: actions/checkout@v1
#     - name: Set up JDK 1.8
#       uses: actions/setup-java@v1
#       with:
#         java-version: 1.8
#     - name: Build with Maven
#       run: mvn -B package --file pom.xml
#     - name: Upload to Release
#       if: github.event_name == 'release'
#       uses: JasonEtco/upload-to-release@master
#       with:
#         args: target/MyGreatJavaSoftware.jar application/java-archive
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload Release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "release.zip"
      #     token: ${{ secrets.GITHUB_TOKEN }}
